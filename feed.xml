<feed xmlns="http://www.w3.org/2005/Atom"> <id></id><title>Xjliang's Blog</title><subtitle>A program lover's personal blog.</subtitle> <updated>2021-02-02T11:39:20+08:00</updated> <author> <name>xjliang</name> <uri></uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 xjliang </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Linus：使用二级指针删除单向链表的某个节点</title><link href="/posts/two-star-programming/" rel="alternate" type="text/html" title="Linus：使用二级指针删除单向链表的某个节点" /><published>2021-02-02T11:20:10+08:00</published> <updated>2021-02-02T11:38:48+08:00</updated> <id>/posts/two-star-programming/</id> <content src="/posts/two-star-programming/" /> <author> <name>xjliang</name> </author> <category term="Technology" /> <summary> 2012年，Linus Torvalds 在 slashdot 回答了一些问题。在众多问题中，令我感兴趣的一个是 favorite hack。他的回答最后如下： At the opposite end of the spectrum, I actually wish more people understood the really core low-level kind of coding. Not big, complex stuff like the lockless name lookup, but simply good use of pointers-to-pointers etc. For example, I’ve seen too many people who delete a singly-linked list entry by keeping tra... </summary> </entry> <entry><title>无插件 VIM 编程技巧</title><link href="/posts/vim-without-plugins/" rel="alternate" type="text/html" title="无插件 VIM 编程技巧" /><published>2021-02-02T10:07:30+08:00</published> <updated>2021-02-02T10:07:30+08:00</updated> <id>/posts/vim-without-plugins/</id> <content src="/posts/vim-without-plugins/" /> <author> <name>xjliang</name> </author> <category term="Technology" /> <summary> 这篇文章里的这些技巧全都是 vim 原生态的，不需要你安装什么插件。这里面是日常用 Vim 编程的一些技巧列出来给大家看看，希望对大家有用。 浏览代码 浏览目录的命令很简单：（你也可以直接 vim 一个目录） :E 注意，是大写。 在新弹出的界面中，你可以用 j, k 键上下移动，然后回车，进入一个目录，或是找开一个文件。你可以看到上面有一堆命令： 【–】 到上级目录 【D】删除文件（大写） 【R】改文件名（大写） 【s】对文件排序（小写） 【x】执行文件 如果你要改变当前浏览的目录，或是查看当前浏览的目录，你可以使用和 shell 一样的命令： **:cd – 改变当前目录** :pwd – 查看当前目录 缓冲区 其实，你用：E 浏览打开的文件都没有被关闭，这些文件都在缓冲区中。你可以用下面的命令来查看缓冲区： ... </summary> </entry> <entry><title>打造高效的工作环境 – SHELL 篇</title><link href="/posts/10-effective-work-with-shell/" rel="alternate" type="text/html" title="打造高效的工作环境 – SHELL 篇" /><published>2021-02-02T09:45:30+08:00</published> <updated>2021-02-02T09:45:30+08:00</updated> <id>/posts/10-effective-work-with-shell/</id> <content src="/posts/10-effective-work-with-shell/" /> <author> <name>xjliang</name> </author> <category term="Technology" /> <summary> 程序员是一个很懒的群体，总想着能够让代码为自己干活，他们不断地把工作生活中的一些事情用代码自动化了，从而让整个社会的效率运作地越来越高。所以，程序员在准备去优化这个世界的时候，都会先要优化自己的工作环境，是所谓 “工欲善其事，必先利其器”。 我们每个程序员都应该打造一套让自己更为高效的工作环境。那怕就是让你少输入一次命令，少按一次键，少在鼠标和键盘间切换一次，都会让程序员的工作变得更为的高效。所以，程序员一般需要一台性能比较好，不会因为开了太多的网页或程序就卡得不行的电脑，还要配备多个显示器，一个显示器写代码，一个查文档，一个测试运行结果，而不必在各种窗口来来回回的切换…… 在大量的窗口间切换经常会迷路，而且也容易出错（分不清线上或测试环境）…… 除了硬件上的装备，软件上也是能够提升程序员生产力的地方，在软件层面提升程序员生产力的东西有一个很重要的事就是命令行和脚本，使用鼠标和图... </summary> </entry> <entry><title>优秀程序员的十个习惯</title><link href="/posts/10-good-habits/" rel="alternate" type="text/html" title="优秀程序员的十个习惯" /><published>2021-02-02T09:30:30+08:00</published> <updated>2021-02-02T09:43:39+08:00</updated> <id>/posts/10-good-habits/</id> <content src="/posts/10-good-habits/" /> <author> <name>xjliang</name> </author> <category term="Thinking" /> <summary> 在这个世界上，有数百万的人热衷于软件开发，他们有很多名字，如：软件工程师（Software Engineer），程序员（Programmer），编码人（Coder），开发人员（Developer）。经过一段时间后，这些人也许能够成为一个优秀的编码人员，他们会非常熟悉如何用计算机语言来完成自己的工作。但是，如果你要成为一个优秀的程序员，你还可以需要有几件事你需要注意，如果你能让下面十个条目成为你的习惯，那么你才能真正算得上是优秀程序员。 学无止境。就算是你有了 10 年以上的程序员经历，你也得要使劲地学习，因为你在计算机这个充满一创造力的领域，每天都会有很多很多的新事物出现。你需要跟上时代的步伐。你需要去了解新的程序语言，以及了解正在发展中的程序语言，以及一些编程框架。还需要去阅读一些业内的新闻，并到一些热门的社区去参与在线的讨论，这样你才能明白和了解整个软件开发的趋... </summary> </entry> <entry><title>Git 命令小抄</title><link href="/posts/git-cheatsheet/" rel="alternate" type="text/html" title="Git 命令小抄" /><published>2021-01-19T14:25:00+08:00</published> <updated>2021-01-19T14:38:42+08:00</updated> <id>/posts/git-cheatsheet/</id> <content src="/posts/git-cheatsheet/" /> <author> <name>xjliang</name> </author> <category term="Technology" /> <summary> 配置 git config --global "Your Name" git config --global "Email Address" git config --global credential.helper store 保存密码 (每次要输密码 / 重复输密码) 初始化 git init 提交修改 git add &amp;lt;file&amp;gt; git add -u 提交 work directory 中所有已 track 的文件至 staging area git commit -m "descriptions" git commit --amend 对最近一次的提交做内容修改 git commit --amend --author "user_name &amp;lt;user_email&amp;gt;" 修改最近提交用户名和邮箱 查看状态、比对 git stat... </summary> </entry> </feed>
